{"version":3,"sources":["componets/InputsForm/InputsForm.module.css","componets/ContactList/ContactList.module.css","componets/ContactData/ContactData.module.css","componets/FindForm/FindForm.module.css","componets/Spinner/Spinner.module.css","componets/ContactList/ContactList.js","componets/Section/Section.js","redux/contacts/contactsSlice.js","redux/contacts/contacts-selectors.js","componets/ContactData/ContactData.js","redux/contacts/contacts-actions.js","componets/FindForm/FindForm.js","componets/Spinner/Spinner.js","componets/InputsForm/InputsForm.js","App.js","redux/contacts/contacts-reducer.js","redux/store.js","index.js"],"names":["module","exports","tempContactArr","Section","children","className","contactsApi","createApi","reducerPath","baseQuery","fetchBaseQuery","baseUrl","tagTypes","endpoints","builder","fetchContacts","query","providesTags","deleteContact","mutation","contactId","url","method","invalidatesTags","createContact","newContact","body","useFetchContactsQuery","useDeleteContactMutation","useCreateContactMutation","getContactsFilter","state","contacts","filter","ContactData","contactObj","isDeleting","isLoading","name","id","phone","s","textItem","btn","type","disabled","onClick","e","target","dataset","key","search","createAction","FindForm","useState","inputValue","setInputValue","dispatch","useDispatch","frame","input","value","placeholder","onChange","currentTarget","pattern","title","required","Spinner","size","loaderBox","color","height","width","timeout","ContactList","data","error","isFetching","findValue","useSelector","errorInfo","list","sort","a","b","localeCompare","item","toLowerCase","includes","map","listItem","InputsForm","setName","setPhone","handleInputChange","reset","onSubmit","preventDefault","findIndex","alert","form","autoComplete","App","createReducer","_","payload","combineReducers","store","configureStore","reducer","contactsReducer","middleware","getDefaultMiddleware","concat","ReactDOM","render","StrictMode","document","getElementById","console","log"],"mappings":"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","file":"static/js/main.2afa762c.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"frame\":\"InputsForm_frame__33NE9\",\"form\":\"InputsForm_form__1sVcK\",\"input\":\"InputsForm_input__1E5l1\",\"btn\":\"InputsForm_btn__24_W6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"ContactList_list__3OIGZ\",\"listItem\":\"ContactList_listItem__2ubI1\",\"errorInfo\":\"ContactList_errorInfo__2668D\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"textItem\":\"ContactData_textItem__3IBF0\",\"btn\":\"ContactData_btn__1Nd_H\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"frame\":\"FindForm_frame__27uWP\",\"input\":\"FindForm_input__yAnby\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loaderBox\":\"Spinner_loaderBox__EQJdW\"};","import PropTypes from 'prop-types';\r\nimport { useSelector} from 'react-redux';\r\nimport {getContactsFilter} from 'redux/contacts/contacts-selectors';\r\nimport { useFetchContactsQuery } from 'redux/contacts/contactsSlice';\r\nimport s from './ContactList.module.css'\r\nimport ContactData from '../ContactData';\r\nimport FindForm from '../FindForm';\r\nimport Spinner from '../Spinner';\r\n\r\n\r\nexport let tempContactArr; //создание ссылки на data, для передачи её в инпуты (для проверки вводимого имени или номера)\r\n\r\nconst ContactList = () => {\r\n\r\n    const { data, error, isFetching } = useFetchContactsQuery();\r\n\r\n    tempContactArr = data;  //создание ссылки на data, для передачи её в инпуты (для проверки вводимого имени или номера)\r\n\r\n    // const findValue = useSelector(state => state.contacts.filter);\r\n    const findValue = useSelector(getContactsFilter);\r\n\r\n     return (\r\n        <div>\r\n\r\n            <FindForm />\r\n             \r\n            {error && <h2 className={s.errorInfo}>ERROR. INTERNET DISCONNECTED</h2>}\r\n                \r\n            {data && (<ul className={s.list}>\r\n                 {[...data].sort((a, b) => a.name.localeCompare(b.name)).filter(item => item.name.toLowerCase().includes(findValue.toLowerCase())).map(item => {\r\n                    const { id } = item;\r\n                    return (\r\n                        <li key={id} className={s.listItem}>\r\n                            < ContactData contactObj={item} />\r\n                        </li>\r\n                    );\r\n                })}\r\n             </ul>)}\r\n             \r\n             {isFetching && <Spinner size={120}/>}\r\n                \r\n        </div>\r\n    );\r\n};\r\n\r\nContactList.propTypes = {\r\n  id: PropTypes.string,\r\n};\r\n\r\nexport default ContactList;\r\n\r\n\r\n/*===================то же с пояснениями===================*/\r\n\r\n// import PropTypes from 'prop-types';\r\n// import { useSelector, useDispatch } from 'react-redux';\r\n// import { getContactsItems, getContactsFilter, getLoadingSpinner } from 'redux/contacts/contacts-selectors';\r\n// import { useFetchContactsQuery } from 'redux/contacts/contactsSlice';\r\n// import s from './ContactList.module.css'\r\n// import ContactData from '../ContactData';\r\n// import FindForm from '../FindForm';\r\n// import Spinner from '../Spinner';\r\n// //=====всё это не надо с RTK Query=====//\r\n// // import { useEffect } from 'react'; \r\n// // import {fetchContacts} from 'redux/contacts/contacts-operations';\r\n\r\n\r\n// export let tempContactArr = []; //создание ссылки на data, для передачи её в инпуты (для проверки вводимого имени или номера)\r\n\r\n// const ContactList = () => {\r\n\r\n//     const { data, isFetching } = useFetchContactsQuery();\r\n\r\n//     tempContactArr = data;  //создание ссылки на data, для передачи её в инпуты (для проверки вводимого имени или номера)\r\n\r\n//     const findValue = useSelector(getContactsFilter);\r\n    \r\n//     //=====всё это не надо с RTK Query=====//\r\n//     // const dispatch = useDispatch();\r\n//     // const contactArr = useSelector(state => state.contacts.items);\r\n//     // const findValue = useSelector(state => state.contacts.filter);\r\n//     // const isLoadingContacts = useSelector(state => state.contacts.loadingSpinner);\r\n//     // const contactArr = useSelector(getContactsItems);\r\n//     // const tempContactArr = [...data].sort((a, b) => a.name.localeCompare(b.name));\r\n//     // const isLoadingContacts = useSelector(getLoadingSpinner);\r\n//     // useEffect(() => { dispatch(fetchContacts()) }, [dispatch]);\r\n//     // const tempContactArr = [...contactArr].sort((a, b) => a.name.localeCompare(b.name));\r\n\r\n//      return (\r\n//         <div>\r\n\r\n//             <FindForm/>\r\n                \r\n//             {data && (<ul className={s.list}>\r\n//                  {[...data].sort((a, b) => a.name.localeCompare(b.name)).filter(item => item.name.toLowerCase().includes(findValue.toLowerCase())).map(item => {\r\n//                     const { id } = item;\r\n//                     return (\r\n//                         <li key={id} className={s.listItem}>\r\n//                             < ContactData contactObj={item} />\r\n//                         </li>\r\n//                     );\r\n//                 })}\r\n//              </ul>)}\r\n             \r\n//             {isFetching && <Spinner/>}\r\n                \r\n//         </div>\r\n//     );\r\n// };\r\n\r\n// ContactList.propTypes = {\r\n//   id: PropTypes.string,\r\n// };\r\n\r\n// export default ContactList;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Section = ({ children }) => {\r\n  return (\r\n    <section>\r\n        <div className=\"container\">\r\n            {children}\r\n         </div>\r\n    </section>\r\n  );\r\n};\r\n\r\nSection.propTypes = {\r\n  title: PropTypes.string,\r\n};\r\n\r\nexport default Section;","import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react';\r\n\r\n// Define a service using a base URL and expected endpoints / Объявляем службу-сервис, используя базовый URL-адрес и ожидаемые конечные точки\r\n\r\nexport const contactsApi = createApi({\r\n    reducerPath: 'contactsAPI',\r\n    \r\n    baseQuery: fetchBaseQuery({ baseUrl: 'https://6191e46441928b00176901ac.mockapi.io/api/v1' }),\r\n\r\n    tagTypes: ['Contacts'],  //создаем тег-ключ (может быть несколько), которыми будем связывать \"действия\"\r\n  \r\n    //получение (фетч) даных с сервера\r\n\r\n    endpoints: (builder) => ({\r\n        fetchContacts: builder.query({\r\n            query: () => `/contacts`,\r\n            //==как вариант, при фетче не нужен==//\r\n            // query: () => ({\r\n            //     url: `/contacts`,\r\n            //     method: 'GET'\r\n            // }),\r\n            providesTags: ['Contacts'], //привязываем зафетченые даные к этому тегу-кллючу\r\n        }),\r\n        \r\n        //другие операции (т.н. мутации) - удаление на сервере, добавление на сервер.....\r\n\r\n        deleteContact: builder.mutation({\r\n            query: contactId => ({\r\n                url: `/contacts/${contactId}`,\r\n                method: 'DELETE'\r\n            }),\r\n            invalidatesTags: ['Contacts'],  //объявляем, что по этому тегу-кллючу нужно повторно инвалидировать даные (перефетчить и перерендерить)\r\n        }),\r\n\r\n        createContact: builder.mutation({\r\n            query: newContact => ({\r\n                url: `/contacts`,\r\n                method: 'POST',\r\n                body: newContact\r\n            }),\r\n           invalidatesTags: ['Contacts'],  \r\n        }),\r\n        \r\n    }),\r\n})\r\n\r\n// Export hooks for usage in functional components, which are / Экспорт хуков для использования в функциональных компонентах, в которых это необходимо\r\n// auto-generated based on the defined endpoints\r\n\r\nexport const { useFetchContactsQuery, useDeleteContactMutation, useCreateContactMutation } = contactsApi;","export const getContactsFilter = state => state.contacts.filter;\r\n// export const getContactsItems = state => state.contacts.items;\r\n// export const getLoadingSpinner = state => state.contacts.loadingSpinner;","import PropTypes from 'prop-types';\r\nimport s from './ContactData.module.css';\r\nimport { useDeleteContactMutation } from 'redux/contacts/contactsSlice';\r\n\r\nconst ContactData = ({ contactObj }) => {\r\n    \r\n    const [deleteContact, { isLoading: isDeleting }] = useDeleteContactMutation();\r\n    const {name, id, phone} = contactObj;\r\n    return (\r\n        <>\r\n            <p className={s.textItem}>\r\n                <span>{name}:</span>\r\n                <span>{phone}</span>\r\n            </p>\r\n            <button\r\n                className={s.btn}\r\n                type={\"button\"}\r\n                data-key={id}\r\n                disabled={isDeleting}\r\n                onClick={e => deleteContact(e.target.dataset.key)}>\r\n                \r\n                {isDeleting ? 'DELETING...' : 'Delete'}\r\n                \r\n            </button>\r\n        </>\r\n    );\r\n};\r\n\r\nContactData.propTypes = {\r\n  name: PropTypes.string,\r\n  phone: PropTypes.string,\r\n  id: PropTypes.string,\r\n};\r\n\r\nexport default ContactData;\r\n\r\n/*===================то же с пояснениями===================*/\r\n\r\n// import PropTypes from 'prop-types';\r\n// import s from './ContactData.module.css';\r\n// //=====всё это не надо с RTK Query=====//\r\n// // import { useDispatch } from 'react-redux';\r\n// // import { delContact } from 'redux/contacts/contacts-operations';\r\n\r\n// import { useDeleteContactMutation } from 'redux/contacts/contactsSlice';\r\n\r\n// const ContactData = ({ contactObj }) => {\r\n    \r\n//     const [deleteContact, {isLoading: isDeleting}] = useDeleteContactMutation()\r\n//      //=====всё это не надо с RTK Query=====//   \r\n//     // const dispatch = useDispatch();    \r\n//     // const deleteContact = e => dispatch(delContact(e.target.dataset.key));\r\n//     const {name, id, phone} = contactObj;\r\n//     return (\r\n//         <>\r\n//             <p className={s.textItem}>\r\n//                 <span>{name}:</span>\r\n//                 <span>{phone}</span>\r\n//             </p>\r\n//             <button\r\n//                 className={s.btn}\r\n//                 type={\"button\"}\r\n//                 data-key={id}\r\n//                 onClick={e => deleteContact(e.target.dataset.key)}>\r\n                \r\n//                 {isDeleting ? 'Deleting...' : 'Delete'}\r\n                \r\n//             </button>\r\n//         </>\r\n//     );\r\n// };\r\n\r\n// ContactData.propTypes = {\r\n//   name: PropTypes.string,\r\n//   phone: PropTypes.string,\r\n//   id: PropTypes.string,\r\n// };\r\n\r\n// export default ContactData;","import { createAction } from '@reduxjs/toolkit';\r\n\r\nexport const search = createAction('findForm/search');\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { useDispatch } from 'react-redux';   \r\nimport {search} from 'redux/contacts/contacts-actions';\r\nimport s from './FindForm.module.css';\r\n\r\n\r\nconst FindForm = () => {     \r\n    const [inputValue, setInputValue] = useState('');\r\n    const dispatch = useDispatch();  \r\n\r\n    const findValue = value => dispatch(search(value));\r\n\r\n    const findInputChange = e => {\r\n        setInputValue(e.currentTarget.value);\r\n        findValue(e.currentTarget.value);\r\n    };\r\n\r\n    // const reset = (e) => setInputValue('');\r\n\r\n    return (\r\n        <div className={s.frame}>\r\n            {/* <h3>Find contacts by name</h3> */}\r\n            <input\r\n                className={s.input}\r\n                type=\"text\"\r\n                name=\"find\"\r\n                value={inputValue}\r\n                placeholder=\"find contacts by name\"\r\n                onChange={findInputChange}\r\n                // onBlur={reset}\r\n                pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n                title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n                required\r\n            />\r\n        </div>\r\n    );\r\n\r\n};\r\n\r\nexport default FindForm;\r\n\r\nFindForm.propTypes = {\r\n    inputValue: PropTypes.string\r\n};","import React from 'react';\r\nimport Loader from \"react-loader-spinner\";\r\nimport s from './Spinner.module.css';\r\n\r\nconst Spinner = ({size}) => {\r\n  return (\r\n    <div className={s.loaderBox}>\r\n      <Loader\r\n        type=\"Oval\"  //Audio Bars BallTriangle Circles Grid Oval Puff Rings TailSpin ThreeDots Hearts\r\n        color=\"#dadada\"\r\n        height={size}\r\n        width={size}\r\n        timeout={5000} // ms\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Spinner;","import { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport s from './InputsForm.module.css';\r\nimport { useCreateContactMutation } from 'redux/contacts/contactsSlice';\r\nimport { tempContactArr } from '../ContactList/ContactList';\r\n\r\nexport default function InputsForm() { \r\n  const [name, setName] = useState('');\r\n  const [phone, setPhone] = useState('');\r\n\r\n  const [createContact, {isLoading}] = useCreateContactMutation();\r\n\r\n  const handleInputChange = e => {\r\n    switch (e.currentTarget.name) {\r\n      case 'subscriber':\r\n        setName(e.currentTarget.value);\r\n        break;\r\n      case 'number':\r\n        setPhone(e.currentTarget.value);\r\n        break;\r\n      default:\r\n        break;\r\n    };\r\n  };\r\n\r\n  const handleSubmit = e => {\r\n    e.preventDefault();\r\n    if (tempContactArr.findIndex(item => item.name === name) !== -1) {\r\n      return alert(`Абонент с именем ${name} уже существует!`) \r\n    };\r\n    if (tempContactArr.findIndex(item => item.phone === phone) !== -1) {\r\n      return alert(`Такой номер ${phone} уже присвоен другому абоненту!`);\r\n    };\r\n    createContact({name, phone});\r\n    reset();\r\n  };\r\n\r\n  const reset = () => {\r\n    setName('');\r\n    setPhone('');\r\n  };\r\n\r\n  return (\r\n      <div className={s.frame}>\r\n      <form\r\n        onSubmit={handleSubmit}\r\n        className={s.form}\r\n        autoComplete=\"on\">\r\n            {/* <h3>Name</h3> */}\r\n            <label >\r\n              <input\r\n                className={s.input}\r\n                type=\"text\"\r\n                name=\"subscriber\"\r\n                placeholder=\"name\"\r\n                value={name}\r\n                onChange={handleInputChange}  \r\n                pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n                title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n                required\r\n              />\r\n            </label>\r\n            \r\n            {/* <h3>Number</h3> */}\r\n\r\n            <label>\r\n                <input\r\n                className={s.input}\r\n                type=\"tel\"\r\n                name=\"number\"\r\n                placeholder=\"phone\"\r\n                value={phone}\r\n                onChange={handleInputChange} \r\n                pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n                title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n                required\r\n              />\r\n            </label> \r\n        <button\r\n          type=\"submit\"\r\n          disabled={isLoading}\r\n          className={s.btn}>\r\n          {isLoading ? 'ADDITION...' : 'Add contact'} \r\n        </button>\r\n        </form> \r\n      </div>\r\n    )\r\n  };\r\n\r\nInputsForm.propTypes = {\r\n  subscriber: PropTypes.string,\r\n  number: PropTypes.string,\r\n};\r\n\r\n\r\n\r\n/*===================то же с пояснениями===================*/\r\n\r\n// import { useState } from 'react';\r\n// import PropTypes from 'prop-types';\r\n// import s from './InputsForm.module.css';\r\n// import { useCreateContactMutation } from 'redux/contacts/contactsSlice';\r\n// import { tempContactArr } from '../ContactList/ContactList';\r\n// //=====всё это не надо с RTK Query=====//\r\n// // import { useSelector, useDispatch } from 'react-redux'; \r\n// // import  { addContact } from 'redux/contacts/contacts-operations';\r\n// // import { getContactsItems } from 'redux/contacts/contacts-selectors';\r\n\r\n// export default function InputsForm() { \r\n//   const [name, setName] = useState('');\r\n//   const [phone, setPhone] = useState('');\r\n\r\n//   const [createContact] = useCreateContactMutation();\r\n\r\n//   //=====всё это не надо с RTK Query=====//\r\n//   // // const contArr = useSelector(state => state.contacts.items);\r\n//   // const contArr = useSelector(getContactsItems);\r\n//   // const dispatch = useDispatch();\r\n//   // const contactToServer = ({name, phone}) => dispatch(addContact({name, phone}));  \r\n\r\n//   const handleInputChange = e => {\r\n//     switch (e.currentTarget.name) {\r\n//       case 'subscriber':\r\n//         setName(e.currentTarget.value);\r\n//         break;\r\n//       case 'number':\r\n//         setPhone(e.currentTarget.value);\r\n//         break;\r\n//       default:\r\n//         break;\r\n//     };\r\n//   };\r\n\r\n//   const handleSubmit = e => {\r\n//     e.preventDefault();\r\n//     console.log('tempContactArr: ', tempContactArr)\r\n    \r\n//     if (tempContactArr.findIndex(item => item.name === name) !== -1) {\r\n//       return alert(`Абонент с именем ${name} уже существует!`) \r\n//     };\r\n//     if (tempContactArr.findIndex(item => item.phone === phone) !== -1) {\r\n//       return alert(`Такой номер ${phone} уже присвоен другому абоненту!`);\r\n//     };\r\n//     createContact({name, phone});\r\n\r\n\r\n//     // contactToServer({name, phone});\r\n//     reset();\r\n//   };\r\n\r\n//   const reset = () => {\r\n//     setName('');\r\n//     setPhone('');\r\n//   };\r\n\r\n//   return (\r\n//       <div className={s.frame}>\r\n//       <form\r\n//         onSubmit={handleSubmit}\r\n//         className={s.form}\r\n//         autoComplete=\"on\">\r\n//             {/* <h3>Name</h3> */}\r\n//             <label >\r\n//               <input\r\n//                 className={s.input}\r\n//                 type=\"text\"\r\n//                 name=\"subscriber\"\r\n//                 placeholder=\"name\"\r\n//                 value={name}\r\n//                 onChange={handleInputChange}  \r\n//                 pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n//                 title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n//                 required\r\n//               />\r\n//             </label>\r\n            \r\n//             {/* <h3>Number</h3> */}\r\n\r\n//             <label>\r\n//                 <input\r\n//                 className={s.input}\r\n//                 type=\"tel\"\r\n//                 name=\"number\"\r\n//                 placeholder=\"phone\"\r\n//                 value={phone}\r\n//                 onChange={handleInputChange} \r\n//                 pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n//                 title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n//                 required\r\n//               />\r\n//             </label> \r\n//           <button type=\"submit\" className={s.btn}>Add contact</button> \r\n//         </form> \r\n//       </div>\r\n//     )\r\n//   };\r\n\r\n// InputsForm.propTypes = {\r\n//   subscriber: PropTypes.string,\r\n//   number: PropTypes.string,\r\n// };\r\n","import './App.css';\nimport Section from 'componets/Section';\nimport InputsForm from 'componets/InputsForm';\nimport ContactList from 'componets/ContactList';\n\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n      <h1>Phonebook</h1>\n\n      <Section>\n        <InputsForm/>\n      </Section>\n\n      <Section>\n          <ContactList/>\n      </Section>\n\n    </div>\n  )\n};\n\nexport default App;\n","\r\nimport { combineReducers } from 'redux';\r\nimport { createReducer } from '@reduxjs/toolkit';\r\nimport {search} from './contacts-actions';\r\n\r\nconst filter = createReducer('', {\r\n    [search]: (_, { payload }) => payload\r\n});\r\n\r\nexport default combineReducers({\r\n    filter,\r\n});\r\n\r\n\r\n//=====всё это не надо с RTK Query=====//\r\n\r\n// import { combineReducers } from 'redux';\r\n// import { createReducer } from '@reduxjs/toolkit';\r\n\r\n// // import { addContact, fetchContacts, delContact } from './contacts-operations'; // c createAsyncThunk\r\n\r\n// import {\r\n//     search,\r\n//     //===== без createAsyncThunk =====//\r\n//     // addContactRequest,\r\n//     // addContactSuccess,\r\n//     // addContactError,\r\n//     // fetchContactsRequest,\r\n//     // fetchContactsSuccess,\r\n//     // fetchContactsError,\r\n//     // delContactRequest,\r\n//     // delContactSuccess,\r\n//     // delContactError\r\n// } from './contacts-actions';\r\n\r\n// // const items = createReducer([], {\r\n// //       //===== c createAsyncThunk =====//\r\n// //     [addContact.fulfilled]: (state, action) => [...state, action.payload], //(state, { payload }) => [...state, payload],\r\n// //     [fetchContacts.fulfilled]: (_, action) => action.payload, // (_, { payload }) => payload,\r\n// //     [delContact.fulfilled]: (state, action) => state.filter(({ id }) => id.toString() !== action.payload.toString()), //(state, { payload }) => state.filter(({ id }) => id.toString() !== payload.toString()),\r\n\r\n// //          //===== без createAsyncThunk =====//\r\n// //     // [addContactSuccess]: (state, action) => [...state, action.payload],\r\n// //     // [fetchContactsSuccess]: (_, action) => action.payload, \r\n// //     // [delContactSuccess]: (state, action) => state.filter(({ id }) => id.toString() !== action.payload.toString())\r\n    \r\n// // });\r\n\r\n// const filter = createReducer('', {\r\n//     [search]: (_, { payload }) => payload\r\n// });\r\n\r\n// // const loadingSpinner = createReducer(false, {\r\n// //     //===== c createAsyncThunk =====//\r\n// //   [addContact.pending]: () => true,\r\n// //   [addContact.fulfilled]: () => false,\r\n// //   [addContact.rejected]: () => false,\r\n    \r\n// //   [fetchContacts.pending]: () => true,\r\n// //   [fetchContacts.fulfilled]: () => false,\r\n// //   [fetchContacts.rejected]: () => false,\r\n  \r\n// //   [delContact.pending]: () => true,\r\n// //   [delContact.fulfilled]: () => false,\r\n// //   [delContact.rejected]: () => false,\r\n\r\n// //         //===== без createAsyncThunk =====//\r\n// // //   [fetchContactsRequest]: () => true,    \r\n// // //   [fetchContactsSuccess]: () => false,    \r\n// // //   [fetchContactsError]: () => false,    \r\n// // //   [addContactRequest]: () => true,    \r\n// // //   [addContactSuccess]: () => false,    \r\n// // //   [addContactError]: () => false,    \r\n// // //   [delContactRequest]: () => true,    \r\n// // //   [delContactSuccess]: () => false,    \r\n// // //   [delContactError]: () => false,    \r\n// // });\r\n\r\n// export default combineReducers({\r\n//     // items,\r\n//     filter,\r\n//     // loadingSpinner\r\n// });\r\n\r\n\r\n\r\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport contactsReducer from './contacts/contacts-reducer';\r\nimport { contactsApi } from 'redux/contacts/contactsSlice';\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n    contacts: contactsReducer,\r\n    [contactsApi.reducerPath]: contactsApi.reducer,\r\n  },\r\n\r\n  middleware: (getDefaultMiddleware) => getDefaultMiddleware().concat(contactsApi.middleware),\r\n});\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport './index.css';\nimport 'modern-normalize/modern-normalize.css';\nimport App from './App';\nimport store from './redux/store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n        <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nconsole.log('Привіт, світ! Життя химерне!');\n\n"],"sourceRoot":""}